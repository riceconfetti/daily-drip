---
import directus from "$services/directus";
import { readItems, readItem } from "@directus/sdk";
import Settings from "$components/Settings.svelte";

import type { Character, GachaEvent, Version, Server } from "$types/db";
import { setValRecursive } from "$utilities/setValRecursive";

import Layout from "$layouts/Layout.astro";
import CharacterCard from "$components/card/CharacterCard.astro";
import ServerSelect from "$components/ServerSelect.svelte";
import PhaseHeader from "$components/PhaseHeader.svelte";
import VersionHeader from "$components/VersionHeader.astro";
import VerisonCard from "$components/VerisonCard.astro";

let versions: Version[] = await directus.request(
  readItems("versions", {
    fields: ["*"],
  })
);

versions.sort((a, b) => a.semVer - b.semVer);

const getEvents = async (id: any) =>
  await directus.request(readItem("events", id));

versions = await Promise.all(
  versions.map(async (v: any) => {
    v.events = await Promise.all(
      v.events.map(async (e: any) => await getEvents(e))
    );
    return v;
  })
);

const getPhase = async (id: any) =>
  await directus.request(readItem("phases", id));

versions = await Promise.all(
  versions.map(async (v: any) => {
    v.events = await Promise.all(
      v.events.map(async (e: any) => {
        e.phase = await getPhase(e.phase);
        return e;
      })
    );
    return v;
  })
);

versions.forEach((v) =>
  v.events.sort((a, b) => Number(a.phase.phase) - Number(b.phase.phase))
);
---

<Layout title="daily drip">
  <ServerSelect client:load />
  <Settings client:only game="starrail" />
  <div class="p-8 grid gap-4 auto-rows-[54rem]">
    {versions.map((v) => <VerisonCard version={v} game="starrail" />)}
  </div>
</Layout>
